// Generated by CoffeeScript 1.8.0
(function() {
  var Popup, extend;

  extend = require('extend');

  Popup = (function() {
    "use strict";
    Popup.prototype._addEvent = (function() {
      if (window.addEventListener) {
        return function(el, eventName, handler) {
          return el.addEventListener(eventName, handler);
        };
      } else {
        return function(el, eventName, handler) {
          return el.attachEvent("on" + eventName, handler);
        };
      }
    })();

    Popup.prototype._removeEvent = (function() {
      if (window.removeEventListener) {
        return function(el, eventName, handler) {
          return el.removeEventListener(eventName, handler);
        };
      } else {
        return function(el, eventName, handler) {
          return el.detachEvent("on" + eventName, handler);
        };
      }
    })();

    Popup.prototype._defaults = {
      width: 640,
      height: 800,
      url: null,
      name: 'popup'
    };

    Popup.prototype.setURL = function() {
      var url;
      if ((url = this.el.getAttribute('href')) != null) {
        return this._url = url;
      } else {
        return this._url = this.opts.url;
      }
    };

    Popup.prototype.setParam = function() {
      var h, height, w, width, x, y;
      if ((w = this.el.getAttribute('data-popup-width')) != null) {
        width = w;
      } else {
        width = this.opts.width;
      }
      if ((h = this.el.getAttribute('data-popup-heigt')) != null) {
        height = h;
      } else {
        height = this.opts.height;
      }
      x = (window.screen.width - width) / 2;
      y = (window.screen.height - height) / 2;
      return this._param = "screenX=" + x + ",screenY=" + y + ",left=" + x + ",top=" + y + ",width=" + width + ",height=" + height + ",toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=yes";
    };

    function Popup(el, opts) {
      this.el = el;
      this.opts = extend({}, this._defaults, opts);
      this.setURL();
      this.setParam();
    }

    Popup.prototype.open = function() {
      window.open(this._url, this.opts.name, this._param);
      return this;
    };

    Popup.open = function(el) {
      var popup;
      popup = new Popup(el);
      return popup.open();
    };

    return Popup;

  })();

  if (typeof define === 'function' && define.amd) {
    define(function() {
      return Popup;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = Popup;
  } else {
    window.Popup || (window.Popup = Popup);
  }

}).call(this);
